module.exports = '#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec3 vWorldPosition;\nvarying vec2 vUv;\nuniform vec3 arenaColor;\nuniform float time;\nuniform float noiseAmount;\nuniform int bgr;\nuniform sampler2D tVideo;\nuniform sampler2D tBroken;\nuniform vec2 resolution;\n\nfloat rand( vec2 co ) {\n    return fract(sin((co.x+co.y*1e3+0.001)*1e-3)*1.e5);\n}\n\nvoid main(void)\n{\n\n    float xs = floor(gl_FragCoord.x / 4.0);\n    float ys = floor(gl_FragCoord.y / 4.0);\n    float ofs = fract(time);\n    float noise = rand(vec2(xs,ys)+vec2(0.0,0.9*ofs));\n\n    vec2 tempUv = vUv;\n    tempUv.x += sin(vUv.y*10.0+0.001)*0.01+cos(vUv.y*40.0+0.001)*0.005;\n    tempUv.y = mix(vUv.y,fract(vUv.y-time*0.3),noiseAmount);\n\n    vec3 videoOrg = texture2D(tVideo, vUv).rgb;\n\n    vec2 offset = vec2(0.01*noiseAmount,0.0);\n    float cr = texture2D(tVideo, tempUv + offset).r;\n    float cga = texture2D(tVideo, tempUv).g;\n    float cb = texture2D(tVideo, tempUv - offset).b;\n    vec3 videoDistort = vec3(cr, cga, cb) + noise*.2;\n\n    //rbg offset\n\n    float brokenColor = texture2D(tBroken,vUv).r;\n    vec3 color = mix( videoOrg, videoDistort,noiseAmount+0.1);\n    vec3 finalColor = mix(color,vec3(noise*0.25),brokenColor);\n\n    finalColor = mix( finalColor+noise*0.03, arenaColor, clamp((vWorldPosition.y+90.0)/-resolution.y,0.0,1.0));\n\n    //scanlines\n    finalColor += vec3(0.01) * sin( (vUv.y) * 360.0 );\n\n    if( bgr == 1 ){\n        gl_FragColor=vec4(finalColor.b,finalColor.g,finalColor.r,1.0);\n    } else {\n        gl_FragColor=vec4(finalColor.rgb,1.0);\n    }\n}\n\n';