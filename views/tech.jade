!!! 5
html.about(lang='en')
  head
    meta(name='apple-mobile-web-app-status-bar-style', content='black')

    title Cube Slam - About the tech
    link(rel='apple-touch-icon', href='/images/mobile/apple-touch-57.png')
    link(rel='apple-touch-icon', sizes='72x72', href='/images/mobile/apple-touch-72.png')
    link(rel='apple-touch-icon', sizes='114x114', href='/images/mobile/apple-touch-114.png')
    link(rel='apple-touch-icon', sizes='144x144', href='/images/minipong.png')

    link(rel='stylesheet', href='//fonts.googleapis.com/css?family=Varela')
    link(rel='stylesheet', href='/stylesheets/slam.css')

    script(type='text/javascript')
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-39581099-3']);
      _gaq.push(['_trackPageview', '/about']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();

  body
    header
      h1
        a(href='/')
          img(src='/images/logo_large.png', width='805', height='93', alt='About Cube Slam')

      a.play-link(href='#webrtc', arb:id='nerdOut') Scroll down to nerd out

     section#webrtc
      img(src='/images/tech/webrtc.jpg', alt='Animals playing pong')
      h1(arb:id='webrtcTitle') WebRTC
      p(arb:id='webrtcText') Cube Slam is built using WebRTC, an open web technology that lets you video chat with your friends right in the browser, no plug-ins necessary. The getUserMedia API provides access to your webcam and microphone, RTCPeerConnection sends the audio and video to your friends, and RTCDataChannel exchanges all the bits and pieces that keep the game in sync. When there are no firewalls in the way, game data can be sent directly peer-to-peer, greatly reducing server costs.

    section#audio
      img(src='/images/tech/audio.jpg', alt='Animals playing pong')
      h1(arb:id='audioTitle') Web Audio
      p(arb:id='audioText') The Cube Slam music-tracker and sound manager are built on the Web Audio API, allowing for a dynamic soundtrack that adapts in real-time to every level you reach and extra you unlock.

    section#renderers
      img(src='/images/tech/3d.jpg', alt='Animals playing pong')
      h1(arb:id='3dTitle') WebGL & CSS3
      p(arb:id='3dText') If you play Cube Slam on Chrome or Firefox, you&rsquo;ll see real-time 3D rendering enabled by WebGL and three.js. If you don&rsquo;t have WebGL, you can still play Cube Slam in 3D thanks to CSS3, with the same game engine running under the hood. All the graphics run on your GPU, freeing the CPU for other tasks.

    section#platform
      img(src='/images/tech/platform.jpg', alt='Animals playing pong')
      h1(arb:id='platformTitle') Google Cloud Platform
      p(arb:id='platformText') Cube Slam is built entirely on Google Cloud Platform. The app is hosted on Google App Engine with a backend written in Go, and the Channel API is used to set up the connection with your opponent. If one of the players is behind a firewall, the game uses a STUN/TURN server hosted on Google Compute Engine to exchange data. PageSpeed helps things load quickly, and AppCache lets you play offline.

    section#opensource
      img(src='/images/tech/opensource.jpg', alt='Animals playing pong')
      h1(arb:id='openTitle') Open source
      p(arb:id='openText') You can check out Cube Slam&rsquo;s source on Google Code or in the Chrome Developer Tools (you&rsquo;ll need to enable source maps). Also, as a reward for reading this far: you can add the ?&#8288;dev parameter to the URL to enable dat.gui and tweak all the levels, extras, and other attributes of the game. Have fun!

    script(src='/javascript/slam.{{.Minified}}js')
    script
      var $ = require('component-jquery')
        , sections = $('section')
        , timer
        , touch = 'ontouchstart' in window || navigator.msMaxTouchPoints
        , ol = $('<ol id="nav"></ol>');

      sections.each(function(){
        var id = $(this).attr('id');
        ol.append('<li><a href="#'+id+'"></a></li>')
      })
      ol.find('a').click(function(){
        $('body').css('paddingTop', $('header').height());
        sections.removeClass('sticky');
        var t = $($(this).attr('href')).offset().top;
        $(window).scrollTop(t);
      })
      $('body').append(ol);

      if( touch ){
        $('html').addClass('touch')
      } else {
        var wheight = 0;
        $(window).resize(function(){
          wheight = $(window).height()
          sections.removeAttr('style');
          sections.each( function(){
            if($(this).outerHeight() < wheight)
              $(this).css('height',wheight)
          })
          $(window).scroll();
        }).resize();

        $(window).scroll(function(){
          var scrollTop = $(window).scrollTop()
            , padding = np = $('header').height()
            , changed = $();
          $('body').css('paddingTop', padding);
          sections.removeClass('sticky').each( function(){
            var el = $(this)
              , oh = el.outerHeight();
            if(el.offset().top + oh <= wheight + scrollTop) {
              np += oh;
              changed = changed.add(this);
            }
            if(el.offset().top - (oh/2) < scrollTop) {
              var id = el.attr('id');
              $('[href="#'+id+'"]').parent().addClass('active')
              .siblings().removeClass('active');
            }
          })
          if(np != padding) {
            $('body').css('paddingTop', np);
            changed.addClass('sticky');
          }
        }).scroll();
      }
    script
      window.onload = function(){
        var lang = require('slam/lib/localization')
        lang.parse('{{.AcceptLanguage}}')
        lang.load()
      }

